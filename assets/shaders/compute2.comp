#version 460
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : enable

#define INVALID_OFFSET 0xFFFFFFFFu

#define ObjectDataSize 24
#define GeometryRegionSize 24
#define IndirectCommandSize 16

layout(buffer_reference, scalar) buffer GpuObjectDataBuffer {
  uint positionIndex;
  uint rotationIndex;
  uint scaleIndex;
  uint geometryRegionId;
  uint materialId;
  uint animationId;
};

layout(buffer_reference, scalar) buffer GpuPositionDataBuffer {
  vec3 position;
};

layout(buffer_reference, scalar) buffer GpuRotationDataBuffer {
  vec4 position;
};

layout(buffer_reference, scalar) buffer GpuScaleDataBuffer {
  vec3 scale;
};

layout(buffer_reference, scalar) buffer GpuGeometryRegionDataBuffer {
  uint indexCount;
  uint indexOffset;
  uint positionOffset;
  uint colorOffset;
  uint texCoordOffset;
  uint normalOffset;
};

layout(buffer_reference, scalar) buffer GpuIndexDataBuffer {
  uint index;
};

layout(buffer_reference, scalar) buffer GpuVertexPositionDataBuffer {
  vec3 position;
};

layout(buffer_reference, scalar) buffer GpuIndirectCommandBuffer {
  uint vertexCount;
  uint instanceCount;
  uint firstVertex;
  uint firstInstance;
};

layout(buffer_reference, scalar) buffer GpuIndirectCountBuffer {
  uint count;
};

layout(push_constant) uniform PushConstants {
  uint objectCount;
  uint64_t objectDataAddress;
  uint64_t objectPositionsAddress;
  uint64_t objectRotationsAddress;
  uint64_t objectScalesAddress;

  uint64_t outputIndirectCommandAddress;
  uint64_t outputIndirectCountAddress;

  uint64_t geometryRegionAddress;
  uint64_t indexDataAddress;
  uint64_t vertexPositionAddress;
  uint64_t vertexNormalAddress;
  uint64_t vertexTexCoordAddress;
  uint64_t vertexColorAddress;
}
pushConstants;

layout(local_size_x = 64) in;

void main() {
  uint idx = gl_GlobalInvocationID.x;
  if (idx >= pushConstants.objectCount)
    return;

  GpuIndirectCountBuffer outCount =
      GpuIndirectCountBuffer(pushConstants.outputIndirectCountAddress);

  if (idx == 0) {
    outCount.count = 0;
  }

  GpuObjectDataBuffer objectData =
      GpuObjectDataBuffer(pushConstants.objectDataAddress + idx * ObjectDataSize);

  GpuGeometryRegionDataBuffer geomData = GpuGeometryRegionDataBuffer(
      pushConstants.geometryRegionAddress + objectData.geometryRegionId * GeometryRegionSize);

  GpuIndirectCommandBuffer outCmd = GpuIndirectCommandBuffer(
      pushConstants.outputIndirectCommandAddress + idx * IndirectCommandSize);

  outCmd.vertexCount = geomData.indexCount;
  outCmd.instanceCount = 1;
  outCmd.firstVertex = geomData.indexOffset;
  outCmd.firstInstance = idx;

  atomicAdd(outCount.count, 1);
}
