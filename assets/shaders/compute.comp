#version 450
#extension GL_EXT_buffer_reference : enable
#extension GL_EXT_buffer_reference_uvec2 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : enable

layout(local_size_x = 16, local_size_y = 1, local_size_z = 1) in;

struct GpuBufferEntry {
  uint indexCount;
  uint firstIndex;
  uint vertexOffset;
  uint instanceCount;
  uint firstInstance;
  uint instanceID;
};

struct DrawCommand {
  uint indexCount;
  uint instanceCount;
  uint firstIndex;
  uint vertexOffset;
  uint firstInstance;
};

layout(push_constant) uniform PushConstants {
  uint64_t drawCommandBufferAddress;
  uint64_t gpuBufferEntryBufferAddress;
  uint64_t objectDataBufferAddress;
  uint instanceDataLength;
}
pc;

layout(buffer_reference, std430) buffer DrawCommandBuffer {
  DrawCommand commands[];
};

layout(buffer_reference, std430) buffer GpuBufferEntryBuffer {
  GpuBufferEntry instanceData[];
};

void main() {
  uint index = gl_GlobalInvocationID.x;

  // Access the buffers via push constant device addresses
  DrawCommandBuffer drawCommands = DrawCommandBuffer(pc.drawCommandBufferAddress);
  GpuBufferEntryBuffer gpuBufferEntryData = GpuBufferEntryBuffer(pc.gpuBufferEntryBufferAddress);

  // Check bounds
  if (index >= pc.instanceDataLength) {
    return;
  }

  GpuBufferEntry data = gpuBufferEntryData.instanceData[index];

  // Populate indirect draw command
  drawCommands.commands[index].instanceCount = data.instanceCount;
  drawCommands.commands[index].indexCount = data.indexCount;
  drawCommands.commands[index].firstIndex = data.firstIndex;
  drawCommands.commands[index].vertexOffset = data.vertexOffset;
  drawCommands.commands[index].firstInstance = data.firstInstance;
}
